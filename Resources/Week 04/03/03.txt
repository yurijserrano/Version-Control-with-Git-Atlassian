This is the second video on pull requests. We will start by discussing forking. We discuss this first because a fork is
a part of a multi-repository pull request. Forking generally means copying a remote
repository to your own online account. It is a feature of get hosting
services such a Bitbucket and GitHub. This diagram shows the upstream
repository and the fork. Both repositories are remote repositories. The upstream repository is usually
considered the source of truth for the project. A fork can be used for
a number of reasons. It can be used to experiment with or
learn from the upstream repository. You have a separate remote repository that
can be synchronized with the upstream repository as the upstream
repository changes. A fork can also be used
to create branches and issue pull requests to
the upstream repository. This is how you can contribute
to the upstream project. We will discuss this later in the video. A fork can also be used to create
a different source of truth. In other words, it can be used to start
a new line of development of the project that remains independent from
the upstream repository. You could use the upstream
project as a starting point for a different type project or you could create a source of truth that
competes with the upstream project. This may or
may not be a desirable thing to do. It maybe better to just help
improve the upstream project. Next, we will discuss creating a fork. A fork is a feature of
a Git hosting service. Here, we log in to Bitbucket and navigate
to the repository that we want to fork. In this case,
it's the project j repository. We then click on the Fork
this repository link. We then name the forked repository. We then click Fork repository. If we then look at our
list of repositories, we can see that we have the upstream
repository named projectj and the fork named projectjfork Next,
we will discuss synchronizing a fork. If commits are made on
the upstream repository, by default the fork will
not contain those commits. In this example, we are viewing our
forked repository in the Bitbucket. There is a message saying that this
fork is 1 commit behind the upstream repository. This means that since
we last synchronized, a commit has been made to
the upstream repository. To synchronize your repositories,
you start by clicking the Sync now link. Synchronizing using Bitbucket creates
a merge commit on the forked repository. You can see that when
we sync the repository, Bitbucket displays
a default commit message. This is for the merge commit. This merge commit is not
in the upstream repository. So even though the project
files are synchronized, the commit histories of
the two repositories differ. This behavior may be fine,
depending on how you are using the fork. If you would like more control
over the commit histories, you can manually sync the repositories
using your local Git client. After sinking the fork, you can
view the merge commit in Bitbucket. In your local client, you'll need to
do a pull to see the merge commit and have the latest project files. Next, we will discuss
multi-repository pull requests. A multi-repository pull request involves
an upstream repository and a fork. To open a multi-repository pull request,
you fork the upstream repository and create a branch on that fork. That branch will be the branch
related to the pull request. When you are ready, you can open
a pull request right from your fork. To create the pull request,
navigate to the forked repository and click Create a pull request. Because this is a forked repository, Bitbucket knows the information
related to the upstream repository. In the window that opens, default pull
request information is filled out for you. You add a title and description,
change any other information, and then click Create pull request. The upstream repository will
then have an open pull request. You can navigate to the pull request's tab
to view and act upon the pull request. If the upstream owner decides to merge the
pull request, they have two basic choices. The first is to use the Bitbucket
interface to perform the merge. The second is to use a local client to
add the forked repository as a remote and then perform and
push the merge to the upstream repository. Here is a review of what we
have discussed in this video. A fork is a remote copy of
an upstream remote repository. A fork is created using
an online Git hosting provider. Forks and upstream repositories
may become out of sync. Pull requests can be made from forks and
merged into the upstream repository. Now it's time for you to work with some
of the topics discussed in this video. Separate hands on instructions
are provided for you.