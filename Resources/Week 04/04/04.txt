This video discusses Git Workflows. A workflow defines how your
team accomplishes work. Git is very flexible and can be tailored
to many types of projects and teams. You can mix and match some of the workflow
ideas described in this video. We will start by discussing
centralized workflows. A centralized workflow uses a single
branch to accomplish the work of the project. Even though this workflow is very simple, you still gain many of
the benefits of git. Your team members can all
work independently, and each has a local copy
of the project history. In this example, the remote
repository contains two commits. User A cloned, fetched, or pulled when
the remote repository only had commit A. They then created commit C. To add commit C to the remote repository,
this user would have to pull or fetch and merge before pushing commit C. User B currently has both commits
from the remote repository and would be able to push to the remote
repository with no problem. A down side of the centralized workflow
is that you are not taking advantage of features related to branching,
such as pull requests. Next we will discuss
the feature branch workflow. In a feature branch workflow, the work
of the project is done in feature, or topic branches. The work is then merged into
a longer running branch. This has been the workflow used
throughout most of this course. The feature branch workflow uses
a single remote repository. Team members create feature branches and
can submit their work using pull requests. Next we will discuss forking workflows. The forking workflow involves
multiple remote repositories. One of the repositories is
considered upstream from the other. The upstream repository is considered
the source of truth for the project. Work is usually transferred from
the remote repository to the upstream repository, via a pull request. One advantage of this workflow is that
the user of the forked repository does not need to have right access
to the upstream repository. This is because a user on the upstream
repository merges the pull request. Because of this, the forking workflow
is very common in open source projects. Forking a repository is a great
way to work on a feature branch without sharing your branch. This provides a remote
backup of your work, and allows you to safely
rebase your local branch. A downside of this approach is that
the two remote repositories can become out of sync. It's the responsibility of the forked
repository to keep up to date with the upstream repository. In this example we have the upstream
repository on the right, the forked repository is on the left. You can see that the forked repository
created the feature1 branch before commit C was added
to the upstream repository. These remote repositories
are now not synchronized. User A of the forked repository would
have to synchronize the repository before they could submit a pull
request with the feature1 branch. This would involve merging or
rebasing before making the pull request. Finally we will discuss GitFlow workflows. GitFlow is a workflow that allows safe
continuous releases of the project. It allows work to continue even
through releases and hotfixes. This commit graph is an example in
the spirit of a GitFlow workflow. The general ideas here are used in
specific ways that depend on the team and the type of project. We will break this commit graph
down step by step shortly, but for now you can see that GitFlow projects
involve a number of branches. In this diagram, the long running
branch labels have solid borders and the short lived branch
labels have dashed borders. You can see that the master and developed branches are the only
long running branches. If you look at the master branch,
you can see that there are three commits. Commit A is the initial
commit in the repository. We will assume that any
commits on the master branch after commit A represent a version of
our project that customers can use. These releases have been
tagged with version labels. This commit graph includes a release
of version1 of the project, then shortly follows with a minor update. We are going to keep things simple and release version 1 of the project with
a single feature named feature1. We will discuss the rest
of this commit graph next. The initial commit of the project
is created on the master branch. It can be very simple,
like a read me file. The develop branch is created
off of the master branch. Commit B is the first commit
on the develop branch. It too can be very simple. We have now created our
two long running branches. Our first release of the project is
planned to have only a single feature named feature1. We create a feature1 branch,
then get to work. Commit C begins the work of feature1. We then finish the work
of feature1 in commit D. Let's assume that the team decides
that feature1 is ready to be merged into the developed branch. This may have been done
through a pull request. Merge commit E is created
on the develop branch. At this point,
the develop branch contains feature1. Since the feature1 branch is merged,
we can delete the feature1 branch label. The team has decided that the first
release will contain only a single feature, and that commit E
represents a release candidate. A release1 branch is
created off of commit E. At this point, commits intended for release1 can only be made
on the release1 branch. Any commits to the develop branch
will be in a future release. The commits on the release1
branch should mainly be for fixing issues with release1,
not adding new features. Since the developer is done with feature1
and knows of no issues with the release, they create a feature2 branch and
begin working on feature2. This work is for
a later release of the project. Commit F contains some
of the work of feature2. The team has discovered a bug in Commit E. Commit G is added to the release1 branch. This commit fixes the bug. As far as the team is concerned, commit G
is ready for release to the master branch. Merge commit H is created. This contains feature1. Commit H is tagged with
a version 1.0 label so that team members can easily find
released versions of the project. When you commit to the master
branch in a GitFlow workflow, it's important to consider how that
commit impacts other branches. Commit G should be merged into the develop
branch, which we do here with commit I. If we didn't do this, the bug fix from commit G would
not be in the develop branch. This means that the bug would
come back in the next release. Because we have merged the release1
branch to both master and develop, we can now
delete the branch1 label. Release branches are only valid for
a single release. Let's say that we are working
away on feature2, and then then someone reports
a bug with our version 1 release. We create a hotfix1 branch
to deal with this problem. And create commit J which fixes the bug. We do not branch off of the develop
branch because new commits could have been made to the develop branch for
the next release. We don't want those
features in our hotfix. We want to make the change to the release
as small as we can to limit our risk while still fixing the bug. Hotfix commit J is then merged
into master with commit K. This fixes the bug. We tag commit K with version 1.01. This represents the latest
release of the project. Because we have committed to master, we
need to also commit to the develop branch. Merge commit L is then created and sharing that the hotfix is also
included in the develop branch. A hotfix branch is created for a single
hotfix and once changes are merged to the master and developed branches,
the hotfix1 branch label can be deleted. At this point, we can continue work on
feature2 and any other work planned for the next release. This process continues indefinitely,
allowing for a continuous improvement of the project. We have used some rules
with our GitFlow workflow. Teams may have different rules. One rule is to only use
merge commits on master. You can see that, with the exception of Commit A,
no work is done directly on master. Commits H and K are merge commits. You can tell that they are merge commits,
because they have have multiple parents. Another rule is that the commits to
master can only come from release or hotfix branches. You should not directly merge from
the develop or feature branches. This helps ensure proper testing and
quality for the release. You can see here that commit H
merges in the release1 branch and commit K merges in the hotfix1 branch. The third rule is, if you commit to master,
also merge into the develop branch. If you don't do this, issues that were
fixed will reappear in future releases. You can see here that when we
merged commit G into master, we also merged it into the develop
branch with merge commit I. If we didn't do that,
the bug fix in commit G, will not be in our future versions. Similarly when we merged
hotfix J into master, we also merged it into the develop
branch in merge commit L. Here's a review of what we've
discussed in this video. A centralized workflow involves
working on a single branch. In a feature branch workflow,
work of the project is done on feature or topic branches and
then merged into longer running branches. In a forking workflow, work is added upstream using pull
requests from the forked repository. GitFlow workflows enable a continuous
train of project releases using multiple types of branches. Now it's time to do the final project for
this course. You will recreate the commit
graph shown here. It should look pretty familiar to you
because it's very similar to the GitFlow workflow that we just went through. The only major difference with this
commit graph is that we've added commits F1 and F2. These are related to feature2. When we created the feature2
branch off of commit E, it was the current commit
on the master branch. But then we worked on fixing
a bug in the release1 branch. Commit F1 is a rebase of
commit F onto commit I. This incorporates the bug fix of
commit G into our feature2 work. Later our feature2 work was again
disrupted by the work of hotfix1. By the time we got back
to work on feature2, we rebased again, creating commit F2. This ensures that the feature2 branch
is working off of the latest commit on the develop branch. Instructions for the project
are provided in a separate document.