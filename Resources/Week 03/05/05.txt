This video discusses the fetch,
pull, and push commands. We will start with
a network command overview. Most commands in Git only interact
with the local repository. However, these four commands, which we will call network commands,
communicate with the remote repository. We discuss the details elsewhere, but
we will describe them here briefly. The clone command copies a remote
repository and creates a local repository. By this point, you have quite
a bit of experience using clone. The fetch command retrieves
the latest objects and references from the remote repository. The pull command combines a fetch and
a merge. The push command adds new objects and
references to the remote repository. We will discuss fetch, push, and
pull in more detail in this video. Next, we will discuss the fetch command. The fetch command retrieves new objects
and references from another repository. It mainly updates all of your
tracking branch information. Fetch allows you to download and
view changes on a remote repository without having to immediately
merge them into your current work. In this example,
we have executed fetch and it resulted in one new
commit in the commit graph. You can see that the tracking
branch is one commit ahead of our local master branch. This means that there's one commit on
the remote repository's master branch that isn't on our local master branch. You often will not have to explicitly
click the fetch button on SourceTree. This is because it can be set
up to fetch in the background. This is a preference in SourceTree. Clicking on the advanced section of
settings shows the check box related to refreshing remote status. If this box is checked,
SourceTree will fetch in the background. Let's look the commit graphs before and
after a fetch. We start with the local repository
with two commits on a single branch. The master branch label and the tracking
branch label both point to commit B. The remote repository has one more commit
than the local repository commit C. This was created after our
most recent network command. After we execute the fetch, the local
repository has all of the commits and references from the remote repository,
but they are on the tracking branch. You can see that this part
of the local repository matches this part of
the remote repository. Our local master branch label has
not moved because of the fetch. A fetch does not impact
the local branch labels. After the fetch, the tracking branch has the same commits
as the remote repository's master branch. Next, we will discuss the pull command. Pull is a network command that
combines fetch and merge. First, new objects and references from
the remote repository are fetched. If new objects are added to
the current branches tracking branch, the tracking branch is merged
into the local branch. Here, SourceTree has notified us that one
new commit is in the remote repository. We click on the pull button. In this case, we are pulling
the master branch from origin and merging it into the local master branch. We can specify the type of merge related
to the pull using the options shown here. By default, the merge will be
fast-forwarded if possible. Otherwise, a merge commit will be created. After the pull, the tracking branch and local master branch labels
point to the same commit. The branches are synchronized. Here we look at executing a pull
that includes fast-forward merge. Before the pull,
the local repository has two commits. The remote repository also
has a third commit, commit C. If we perform a pull,
commit C will be fetched and the tracking branch
label will point to it. Because we haven't made any commits
to the master branch locally that aren't on the remote repository,
a fast-forward merge is then performed. This simply moves the master branch
label and head reference to commit C. After executing the pull, the local and
remote branches are synchronized. Let's look at the pull that
involves the merge commit. Before the pull, we have a local
repository with three commits A, B, and D. The tracking branch commit is commit B and
the local master branch tip is commit D. The remote repository also has three
commits, but the last commit is commit C. What probably happened is that we fetched
when there were two commits on the remote repository. Someone then made and pushed commit
C sometime before we make commit D. When we execute a pull,
first the fetch happens. Commit C is retrieved from origin and the tracking branch label
then points to commit C. That is the same as the tip
of the remote repository. After the fetch,
the tracking branch is merged into the local master branch
creating merge commit E. The merge commit is necessary
because commits D and C both think that commit B is its parent. Notice that the tracking
branch label stays behind because we merged into
the local master branch. That also makes sense because the tracking
branch represents the remote branch, and the remote branch tip is on commit C. At this point, the remote doesn't know
that we created a merge commit locally. If you have new local commits and
new remote commits, you find yourself in a situation where
a fast-forward merge is not possible. In this case, our local master branch in
one commit ahead of the tracking branch and one commit behind the tracking branch. In this case by default,
a pull will create a merge commit. Executing a pull in this
situation creates a merge commit. This commit is only in
the local repository. SourceTree notifies us that two local
commits are not on the remote repository. You typically would click push at this
point then to add the commit to the remote repository. Notice the similarities between
merging after a pull and merging in a feature branch. On the left,
we create a merge commit after a pull. Notice that a merge commit was
created even though the only branch is the master branch. This is because the tip of the tracking
branch is acting like a topic branch to get the tracking branch
is just another branch. On the right, we merge in a topic branch. Notice that the commit graphs
are basically the same. Anything that can happen when merging in
a topic branch can happen when merging in a tracking branch. Next, we will discuss the push command. The push command is used to add
commits to the remote repository. Here we have been notified by
SourceTree that we have two local commits that are not
in a remote repository. When you click on push,
this dialogue opens. You can select the repository to
push to and specify the local and remote branches involved in the push. After executing the push,
the tracker branch label and local branch label point
to the same commit. The branches are synchronized. The general rule is to fetch or
pull before you do a push. You don't have to do this, but if you try to push when you don't have the
latest remote changes, the push will fail. If you execute a fetch and no objects
are retrieved, you can safely push. If you are worried about a pull
creating an unwanted merge commit, you can use the fast-forward only option. This example shows what happens
when we try to push but don't have the latest commits locally. Git rejects the push suggesting
that you do a pull first. This is to prevent work on the remote
repository from being overwritten. Here is a review of what we
have discussed in this video. Clone, fetch, pull, and push commands
communicate with a remote repository. Fetch updates tracking branch information. Pull combines a fetch and a merge. Push adds commits to
the remote repository. Now it's time to work with some of
the topics discussed in this video, separate hands on
instructions are provided.