WEBVTT

1
00:00:00.160 --> 00:00:03.765
This video discusses Rebasing.

2
00:00:03.765 --> 00:00:09.033
We'll start with the Rebasing overview.

3
00:00:09.033 --> 00:00:11.095
We start with a warning.

4
00:00:11.095 --> 00:00:14.343
The topics discussed here rewrite the commit history,

5
00:00:14.343 --> 00:00:16.082
so this should be done with caution.

6
00:00:16.082 --> 00:00:19.115
There is a general rule related to Rebase.

7
00:00:19.115 --> 00:00:22.925
Do not rewrite history that has been shared with others.

8
00:00:22.925 --> 00:00:27.125
If you've been working locally or if you know that no one else

9
00:00:27.125 --> 00:00:31.423
has used your branch you can safely Rebase it.

10
00:00:31.423 --> 00:00:34.485
There are two types of Rebase,

11
00:00:34.485 --> 00:00:38.330
a regular Rebase and an interactive Rebase.

12
00:00:38.330 --> 00:00:41.425
These can be very different as we will see.

13
00:00:41.425 --> 00:00:46.663
A rebase moves commits to a new parent or base.

14
00:00:46.663 --> 00:00:49.140
If we look at the example on the left,

15
00:00:49.140 --> 00:00:52.935
we have a situation that would typically involve a "merge commit"

16
00:00:52.935 --> 00:00:58.785
because commit D has been made after the featureX branch was made.

17
00:00:58.785 --> 00:01:02.170
However, there is another option and that is to rebase.

18
00:01:02.170 --> 00:01:08.705
What rebasing does is take commit B and C and moves them to a new parent

19
00:01:08.705 --> 00:01:11.520
commit D. The result is that you no

20
00:01:11.520 --> 00:01:15.390
longer need a merge commit and the merge can be fast forwarded.

21
00:01:15.390 --> 00:01:17.490
Because the commits have been moved,

22
00:01:17.490 --> 00:01:20.085
they are reapplied on top of the new commit.

23
00:01:20.085 --> 00:01:26.350
This creates a different ancestor chain and as a result each of the commit IDs change.

24
00:01:26.350 --> 00:01:32.780
So in this example commit B changes to B prime and commit C changes to C prime.

25
00:01:32.780 --> 00:01:38.750
You can see that this is necessary because before the rebase commit B's parent was A.

26
00:01:38.750 --> 00:01:47.115
And after the rebase commit B prime's parent is D. To help understand how Rebasing works,

27
00:01:47.115 --> 00:01:49.070
we can look at DIFFS.

28
00:01:49.070 --> 00:01:53.181
We know that each commit contains a snapshot of the complete project,

29
00:01:53.181 --> 00:01:57.505
however, it can calculate the difference between two commits.

30
00:01:57.505 --> 00:02:00.105
This is known as a diff or a patch.

31
00:02:00.105 --> 00:02:02.805
So commit A has the entire project,

32
00:02:02.805 --> 00:02:05.400
commit B has the entire project.

33
00:02:05.400 --> 00:02:11.140
It can calculate diff AB which is the difference between commits A and B.

34
00:02:11.140 --> 00:02:15.810
The same goes for commits B and C. Diff BC is the difference between

35
00:02:15.810 --> 00:02:21.219
commits B and C. When rebasing,

36
00:02:21.219 --> 00:02:24.351
git applies the diffs to the new parent commit.

37
00:02:24.351 --> 00:02:26.925
This is called "reapplying commits."

38
00:02:26.925 --> 00:02:29.945
In the before commit graph on the left,

39
00:02:29.945 --> 00:02:35.820
we can see that the parent of B is A and the parent of C is B and

40
00:02:35.820 --> 00:02:42.330
the difference between B and A is diff AB and the difference between C and B is diff BC.

41
00:02:42.330 --> 00:02:46.980
With rebasing, Git takes the difference between A and B and

42
00:02:46.980 --> 00:02:51.886
applies it with a parent of commit D. This creates a new commit ID.

43
00:02:51.886 --> 00:02:58.575
It then applies the difference between commits B and C and creates commit C prime.

44
00:02:58.575 --> 00:03:06.150
Reapplying commits is a form of merge and is susceptible to merge conflicts.

45
00:03:06.150 --> 00:03:09.990
If we look at this simple example commit B change fileA.txt

46
00:03:09.990 --> 00:03:14.750
one way and commit C changed fileA.txt in a different way.

47
00:03:14.750 --> 00:03:18.470
Reapplying commit B onto commit C creates

48
00:03:18.470 --> 00:03:23.975
a merge conflict because Git does not know how to write fileA.txt.

49
00:03:23.975 --> 00:03:26.825
Rebasing has pros and cons,

50
00:03:26.825 --> 00:03:30.720
the pros are that you can incorporate changes from the parent branch,

51
00:03:30.720 --> 00:03:34.595
so if that branch has new features or bug fixes, you will see them.

52
00:03:34.595 --> 00:03:39.500
The tests on your branch are using more current code and because you are keeping up with

53
00:03:39.500 --> 00:03:45.290
the changes on other branches the eventual merge into the base branch will be easier.

54
00:03:45.290 --> 00:03:50.390
Another big advantage of Rebasing is that it avoids unnecessary merge commits.

55
00:03:50.390 --> 00:03:54.475
You can then have a very well-defined and clean commit history.

56
00:03:54.475 --> 00:03:57.410
The downside of Rebasing is it's a form of merge,

57
00:03:57.410 --> 00:04:00.470
so merge conflicts may need to be resolved.

58
00:04:00.470 --> 00:04:03.890
We've also pointed out that if you've already shared your commits that

59
00:04:03.890 --> 00:04:08.030
can cause problems because the commit IDs change in a Rebase.

60
00:04:08.030 --> 00:04:12.010
And finally with the Rebase you are not preserving the commit history,

61
00:04:12.010 --> 00:04:15.597
you are rewriting the commit history.

62
00:04:15.597 --> 00:04:19.945
Next we will discuss Executing a rebase.

63
00:04:19.945 --> 00:04:24.835
There are two basic ways that you can execute a "git rebase."

64
00:04:24.835 --> 00:04:28.710
The first is to check out the feature branch and then execute "git

65
00:04:28.710 --> 00:04:33.975
rebase" specifying the upstream argument which is something like the master branch.

66
00:04:33.975 --> 00:04:35.310
This will change the parent of

67
00:04:35.310 --> 00:04:39.300
the currently checked out branch to the tip of the upstream branch.

68
00:04:39.300 --> 00:04:40.585
In the second option,

69
00:04:40.585 --> 00:04:43.335
you don't have to check out the feature branch first,

70
00:04:43.335 --> 00:04:48.210
you specify it as the second argument of the git rebase command.

71
00:04:48.210 --> 00:04:49.645
In the example here,

72
00:04:49.645 --> 00:04:52.860
"git checkout featureX" and "git rebase

73
00:04:52.860 --> 00:04:58.990
master" is equivalent to "git rebase master featureX."

74
00:04:58.990 --> 00:05:03.920
Next we will discuss Rebasing with merge conflicts.

75
00:05:03.920 --> 00:05:06.650
Because rebasing is a form of merge,

76
00:05:06.650 --> 00:05:11.030
merge conflicts can arise and what happens is you check out the feature branch,

77
00:05:11.030 --> 00:05:15.620
execute "git rebase master" and git informs you that there is a merge conflict.

78
00:05:15.620 --> 00:05:17.930
You can execute "git status" and see that

79
00:05:17.930 --> 00:05:21.575
both commits have modified the same file in different ways.

80
00:05:21.575 --> 00:05:24.920
Then you fix the file resolving the conflict markers,

81
00:05:24.920 --> 00:05:30.835
add it to the staging area and then execute "git rebase continue."

82
00:05:30.835 --> 00:05:34.685
Let's look at an example of a rebase with a merge conflict.

83
00:05:34.685 --> 00:05:37.550
We start by looking at our commit graph.

84
00:05:37.550 --> 00:05:39.860
You can see that the head refers to

85
00:05:39.860 --> 00:05:44.145
the feature branch and there is another commit on the master branch.

86
00:05:44.145 --> 00:05:48.360
We want to rebase the feature branch onto the master branch.

87
00:05:48.360 --> 00:05:50.625
We execute "git rebase

88
00:05:50.625 --> 00:05:56.825
master" and git will start by replaying the commits on top of the new commit.

89
00:05:56.825 --> 00:06:02.150
It will notice a merge conflict and modify fileA.txt and ask you

90
00:06:02.150 --> 00:06:04.555
to resolve the problem and execute

91
00:06:04.555 --> 00:06:08.820
"git rebase continue" after the problem has been resolved.

92
00:06:08.820 --> 00:06:12.610
We can execute the "git status" command and git

93
00:06:12.610 --> 00:06:15.280
shows you that you are currently in a rebase and

94
00:06:15.280 --> 00:06:21.115
that fileA.txt has been modified and placed in the working tree.

95
00:06:21.115 --> 00:06:25.585
We can view fileA.txt and see the conflict markers.

96
00:06:25.585 --> 00:06:27.115
We then edit the file,

97
00:06:27.115 --> 00:06:29.500
so that it looks the way that we want.

98
00:06:29.500 --> 00:06:36.975
We add the file to the staging area and then execute "git rebase continue."

99
00:06:36.975 --> 00:06:40.160
Executing "git status" again shows that

100
00:06:40.160 --> 00:06:42.410
there is nothing to commit and the working tree is

101
00:06:42.410 --> 00:06:47.800
clean and see that after the rebase we have a nice linear graph.

102
00:06:47.800 --> 00:06:51.745
If you begin the rebase and it has a merge conflict,

103
00:06:51.745 --> 00:06:56.466
you can use the abort option to get back to the pre-rebase state.

104
00:06:56.466 --> 00:06:59.375
Here we check out the feature branch,

105
00:06:59.375 --> 00:07:05.335
we then execute "git rebase master" and we see that there is a "merge conflict."

106
00:07:05.335 --> 00:07:11.810
We can then execute "git rebase" with the "abort option" to abort that rebase.

107
00:07:11.810 --> 00:07:17.330
And git status shows that we have nothing to commit and the working tree is clean.

108
00:07:17.330 --> 00:07:20.555
This shows the difference between resolving

109
00:07:20.555 --> 00:07:24.725
a merge conflict using a merge commit and using Rebase.

110
00:07:24.725 --> 00:07:27.595
On the left we see the merge commit flow.

111
00:07:27.595 --> 00:07:32.450
We start by checking out the master branch and merging in the featureX branch.

112
00:07:32.450 --> 00:07:34.730
Git shows us there's a conflict,

113
00:07:34.730 --> 00:07:39.639
git status shows that the fileA.txt file now has conflict markers.

114
00:07:39.639 --> 00:07:45.770
You fix fileA.txt, add it to the staging area and execute "git commit."

115
00:07:45.770 --> 00:07:49.565
When Rebasing you start by checking out the featureX branch

116
00:07:49.565 --> 00:07:54.155
and execute "git rebase master," this will show a conflict.

117
00:07:54.155 --> 00:07:58.725
Git status will show that fileA.txt has the conflict markers,

118
00:07:58.725 --> 00:08:02.480
you'll fix and add the file as before but this time you

119
00:08:02.480 --> 00:08:07.117
will execute "git rebase" with the "continue option."

120
00:08:07.117 --> 00:08:11.295
Here's a review of what we've discussed in this video.

121
00:08:11.295 --> 00:08:15.285
Rebasing moves a branch to the tip of another branch.

122
00:08:15.285 --> 00:08:22.301
Rebasing is a form of merge and may result in merge conflicts.

123
00:08:22.301 --> 00:08:26.660
Now it's time for you to work on the topics discussed in this video.

124
00:08:26.660 --> 00:08:29.790
Separate Hands-on instructions are provided.