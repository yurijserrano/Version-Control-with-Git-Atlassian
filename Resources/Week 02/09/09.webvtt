WEBVTT

1
00:00:00.970 --> 00:00:05.170
This video discusses Git Branches.

2
00:00:05.170 --> 00:00:10.518
We will start with an overview of branches.

3
00:00:10.518 --> 00:00:13.970
All commits of a project belong to a branch.

4
00:00:13.970 --> 00:00:17.400
By default, commit belong to the master branch.

5
00:00:17.400 --> 00:00:21.110
A branch is a set of commits starting with the most recent commit in

6
00:00:21.110 --> 00:00:25.630
the branch and tracing back to the project's first commit.

7
00:00:25.630 --> 00:00:29.360
In this example, starting from the most recent commit on the branch,

8
00:00:29.360 --> 00:00:32.915
the master branch contains commits B and A.

9
00:00:32.915 --> 00:00:37.205
The feature X branch contains commits C, B and A.

10
00:00:37.205 --> 00:00:41.880
Notice that commits B and A belong to both branches.

11
00:00:41.880 --> 00:00:45.490
Let's take a look at some of the benefits of branches.

12
00:00:45.490 --> 00:00:48.873
We will see that creating a branch is fast and easy.

13
00:00:48.873 --> 00:00:52.870
Creating a branch only creates one tiny file, a reference.

14
00:00:52.870 --> 00:00:56.580
Branches enable experimentation.

15
00:00:56.580 --> 00:00:59.030
Team members can isolate their work so that it

16
00:00:59.030 --> 00:01:01.790
doesn't impact others until the work is ready.

17
00:01:01.790 --> 00:01:04.460
Branches are not aware of other branches.

18
00:01:04.460 --> 00:01:07.595
This allows you to experiment with changes to the project,

19
00:01:07.595 --> 00:01:12.020
while at the same time the team retains a stable version of the project.

20
00:01:12.020 --> 00:01:14.083
If you have an idea for a change,

21
00:01:14.083 --> 00:01:16.505
you can create a branch and test your idea.

22
00:01:16.505 --> 00:01:18.620
Later you can throw out your branch,

23
00:01:18.620 --> 00:01:21.020
or merge it into the official project.

24
00:01:21.020 --> 00:01:26.791
Branches enable multiple team members to concurrently work on the project,

25
00:01:26.791 --> 00:01:28.700
without stepping on each other's work.

26
00:01:28.700 --> 00:01:32.030
Merging the work together later usually is not too difficult.

27
00:01:32.030 --> 00:01:38.550
Branches allow you to support multiple versions of the project simultaneously.

28
00:01:38.550 --> 00:01:40.080
For example, if the project is

29
00:01:40.080 --> 00:01:43.680
a software project with customers on several supported versions,

30
00:01:43.680 --> 00:01:47.460
you can update each version if an important hot fix is necessary.

31
00:01:47.460 --> 00:01:52.260
Branches can be short lived or long running.

32
00:01:52.260 --> 00:01:56.685
Short lived branches are commonly called topic or feature branches,

33
00:01:56.685 --> 00:02:00.095
and usually contain one small change to the project.

34
00:02:00.095 --> 00:02:04.800
For example, a topic branch may contain a new feature, a bug fix,

35
00:02:04.800 --> 00:02:07.830
a hot fix, a configuration change,

36
00:02:07.830 --> 00:02:10.860
or any other change that the project requires.

37
00:02:10.860 --> 00:02:15.130
When it's ready, a topic branch is merged into a long running branch.

38
00:02:15.130 --> 00:02:18.870
In this example, the feature X branch is a topic branch.

39
00:02:18.870 --> 00:02:21.550
Two commits were needed to create the feature,

40
00:02:21.550 --> 00:02:25.170
and then the feature was merged into the master branch.

41
00:02:25.170 --> 00:02:29.655
Long running branches like the master branch live longer than topic branches,

42
00:02:29.655 --> 00:02:32.270
and can even live for the life of the project.

43
00:02:32.270 --> 00:02:34.770
Examples of branches that might live for the life of

44
00:02:34.770 --> 00:02:38.710
a project are a master branch or a develop branch.

45
00:02:38.710 --> 00:02:40.590
We will see later that git branches are

46
00:02:40.590 --> 00:02:43.680
flexible enough to work with many types of workflows.

47
00:02:43.680 --> 00:02:50.903
So you can pick a branching strategy that works best for your team and for your project.

48
00:02:50.903 --> 00:02:56.455
Use the git branch command to see a list of branches in the local repository.

49
00:02:56.455 --> 00:03:00.120
The branch that you are currently on has an asterisk.

50
00:03:00.120 --> 00:03:03.690
You can see here that there are two branches in the local repository,

51
00:03:03.690 --> 00:03:08.080
and the current branch is the master branch.

52
00:03:08.080 --> 00:03:11.245
Next, we will discuss creating a branch.

53
00:03:11.245 --> 00:03:14.085
In addition to listing branches,

54
00:03:14.085 --> 00:03:17.770
the git branch command is used to create branches.

55
00:03:17.770 --> 00:03:22.360
You specify the new branch name as an argument to the git branch command.

56
00:03:22.360 --> 00:03:26.495
Creating a branch simply creates a new branch label reference.

57
00:03:26.495 --> 00:03:29.230
You remain on the original branch.

58
00:03:29.230 --> 00:03:33.360
Here we start with just a master branch containing three commits.

59
00:03:33.360 --> 00:03:37.620
We then create a feature X branch off of the most recent master commit,

60
00:03:37.620 --> 00:03:41.400
by creating a feature X branch label pointing to that commit.

61
00:03:41.400 --> 00:03:44.553
To create the feature X branch label,

62
00:03:44.553 --> 00:03:48.090
we execute git branch feature X.

63
00:03:48.090 --> 00:03:51.120
We then execute git branch,

64
00:03:51.120 --> 00:03:54.038
and see that we've created the feature X branch,

65
00:03:54.038 --> 00:03:57.275
but our current branch is still the master branch.

66
00:03:57.275 --> 00:04:00.480
You can see in the diagram on the right that the HEAD reference still

67
00:04:00.480 --> 00:04:04.260
points to the master branch label after creating the feature X branch.

68
00:04:04.260 --> 00:04:09.665
Next we will discuss checkout.

69
00:04:09.665 --> 00:04:15.430
Check out is usually related to branches and does two main things.

70
00:04:15.430 --> 00:04:17.710
First, it switches the current commit

71
00:04:17.710 --> 00:04:20.360
which is the commit that the HEAD reference points to,

72
00:04:20.360 --> 00:04:23.560
to the checked out branch label or commit.

73
00:04:23.560 --> 00:04:25.000
In this example, if we were on

74
00:04:25.000 --> 00:04:28.510
the master branch and then checked out the feature X branch,

75
00:04:28.510 --> 00:04:31.950
the HEAD reference changes from pointing to the master branch label

76
00:04:31.950 --> 00:04:36.230
to pointing to the feature X branch label.

77
00:04:36.230 --> 00:04:37.970
The second thing that checkout does,

78
00:04:37.970 --> 00:04:42.880
is it updates the working tree with the files from the checked out commit.

79
00:04:42.880 --> 00:04:44.475
Once you have checked out a branch,

80
00:04:44.475 --> 00:04:47.335
you can work on and commit to the branch.

81
00:04:47.335 --> 00:04:49.650
In this example, the feature X label

82
00:04:49.650 --> 00:04:52.710
points to the same commit as the master branch label.

83
00:04:52.710 --> 00:04:59.078
So, at this point the working tree files will be the same for both branches.

84
00:04:59.078 --> 00:05:03.555
Use the git checkout command to checkout a branch or commit.

85
00:05:03.555 --> 00:05:05.175
To checkout a branch,

86
00:05:05.175 --> 00:05:07.740
specify a branch name as the argument.

87
00:05:07.740 --> 00:05:09.904
To checkout a specific commit,

88
00:05:09.904 --> 00:05:14.264
specify it's SHA-1 as an argument.

89
00:05:14.264 --> 00:05:16.160
Here we change from the master branch to

90
00:05:16.160 --> 00:05:20.635
the feature X branch by executing get checkout feature X.

91
00:05:20.635 --> 00:05:26.040
We execute git branch and see that we're currently on the feature X branch.

92
00:05:26.040 --> 00:05:29.520
If we list the contents of the working tree,

93
00:05:29.520 --> 00:05:34.710
we would see that the files for the feature X version would be available.

94
00:05:34.710 --> 00:05:37.985
To create and checkout a branch,

95
00:05:37.985 --> 00:05:42.945
you could first create the branch using the get branch command as we do here.

96
00:05:42.945 --> 00:05:44.951
After executing that command,

97
00:05:44.951 --> 00:05:47.075
you've created a feature X branch,

98
00:05:47.075 --> 00:05:51.540
but the HEAD reference is still pointing to the master branch label.

99
00:05:51.540 --> 00:05:54.640
You can then use the git checkout command to

100
00:05:54.640 --> 00:05:57.820
checkout the feature X branch as we see here.

101
00:05:57.820 --> 00:06:04.020
These two commands in combination create and switch to the feature X branch.

102
00:06:04.020 --> 00:06:09.536
To combine creating and checking out a branch into a single command,

103
00:06:09.536 --> 00:06:11.250
use the -B option with git checkout.

104
00:06:11.250 --> 00:06:16.530
This combines the git branch and the git checkout commands.

105
00:06:16.530 --> 00:06:18.720
This command is only for new branches.

106
00:06:18.720 --> 00:06:22.530
It fails if the branch already exists.

107
00:06:22.530 --> 00:06:26.545
After you've created and checked out the feature X branch,

108
00:06:26.545 --> 00:06:27.925
as shown on the left,

109
00:06:27.925 --> 00:06:31.570
the next commit that is made will be made to the feature X branch.

110
00:06:31.570 --> 00:06:34.998
The HEAD reference moves along with the feature X label,

111
00:06:34.998 --> 00:06:37.405
and the master label stays where it was.

112
00:06:37.405 --> 00:06:41.165
The master branch no longer points to the latest commit.

113
00:06:41.165 --> 00:06:45.070
In fact, the master branch doesn't know about the feature X branch label,

114
00:06:45.070 --> 00:06:48.175
or about the latest commit on feature X.

115
00:06:48.175 --> 00:06:51.370
This is how the feature X branch can make changes to the project

116
00:06:51.370 --> 00:06:55.340
without disturbing the master branch.

117
00:06:55.340 --> 00:06:57.050
Once we have checked out master,

118
00:06:57.050 --> 00:06:59.075
we can do some work in the working tree,

119
00:06:59.075 --> 00:07:00.585
and create a commit.

120
00:07:00.585 --> 00:07:02.990
Now the feature X branch and master branch

121
00:07:02.990 --> 00:07:06.360
both have a commit that doesn't belong to the other branch.

122
00:07:06.360 --> 00:07:10.505
You can see that commit D uniquely belongs to the feature X branch,

123
00:07:10.505 --> 00:07:16.060
and commit E uniquely belongs to the master branch.

124
00:07:16.060 --> 00:07:19.351
Next we will discuss detached HEADs.

125
00:07:19.351 --> 00:07:22.445
Usually you checkout a branch,

126
00:07:22.445 --> 00:07:25.355
which checks out the commit that the branch label points to,

127
00:07:25.355 --> 00:07:29.300
but you also have the option of directly checking out a commit.

128
00:07:29.300 --> 00:07:31.460
For example, you might checkout a commit to

129
00:07:31.460 --> 00:07:34.655
temporarily view an older version of the project.

130
00:07:34.655 --> 00:07:39.710
Checking out a commit rather than a branch leads to a detached HEAD state.

131
00:07:39.710 --> 00:07:43.490
This means that instead of the HEAD reference pointing to a branch label,

132
00:07:43.490 --> 00:07:47.125
HEAD points directly to the SHA-1 of a commit.

133
00:07:47.125 --> 00:07:49.730
So a detached HEAD basically means that

134
00:07:49.730 --> 00:07:52.707
the HEAD reference is detached from a branch label.

135
00:07:52.707 --> 00:07:57.480
Git will warn you that if you continue you will be in a detached HEAD state.

136
00:07:57.480 --> 00:07:59.710
In this example in the before state,

137
00:07:59.710 --> 00:08:03.460
we have the master branch checked out as is normal.

138
00:08:03.460 --> 00:08:05.908
If we then checkout commit B,

139
00:08:05.908 --> 00:08:08.275
that commit will become the current commit,

140
00:08:08.275 --> 00:08:11.250
and the HEAD reference will point directly at commit B,

141
00:08:11.250 --> 00:08:14.130
creating a detached HEAD state.

142
00:08:14.130 --> 00:08:17.355
Temporarily viewing the files of a commit

143
00:08:17.355 --> 00:08:20.540
while in a detached HEAD state is perfectly fine.

144
00:08:20.540 --> 00:08:25.830
However, if you want to work on files of the checked out commit and create new commits,

145
00:08:25.830 --> 00:08:28.605
you should create a branch on that commit first.

146
00:08:28.605 --> 00:08:31.096
On the left, we've checked out commit B,

147
00:08:31.096 --> 00:08:33.125
creating a detached HEAD.

148
00:08:33.125 --> 00:08:35.960
If we want to create commits based off of commit B,

149
00:08:35.960 --> 00:08:39.338
we should first create a feature X branch label,

150
00:08:39.338 --> 00:08:41.820
and checkout that branch.. That puts us back in

151
00:08:41.820 --> 00:08:45.400
the normal state where the HEAD reference points to a branch label.

152
00:08:45.400 --> 00:08:50.305
The next commit will then be made to the feature X branch.

153
00:08:50.305 --> 00:08:54.180
Finally, we will discuss deleting a branch label.

154
00:08:54.180 --> 00:08:59.155
Deleting a branch really just means that you're deleting a branch label.

155
00:08:59.155 --> 00:09:02.980
Deleting a branch label normally does not delete any commits,

156
00:09:02.980 --> 00:09:05.245
at least not right away.

157
00:09:05.245 --> 00:09:06.745
In the example on the left,

158
00:09:06.745 --> 00:09:09.380
we created a feature X branch.

159
00:09:09.380 --> 00:09:13.230
This simply added the feature X label to the latest commit.

160
00:09:13.230 --> 00:09:16.420
If we then immediately delete the feature X branch,

161
00:09:16.420 --> 00:09:20.050
all that happens is that the feature X label is deleted.

162
00:09:20.050 --> 00:09:23.955
This shows how truly lightweight git branches are.

163
00:09:23.955 --> 00:09:30.215
Used the -d option on the git branch command to delete a branch.

164
00:09:30.215 --> 00:09:31.970
Here we start with two branches,

165
00:09:31.970 --> 00:09:33.610
but use the -d option,

166
00:09:33.610 --> 00:09:35.600
to delete the feature X branch.

167
00:09:35.600 --> 00:09:40.735
A call to git branch shows that the feature X branch has been deleted.

168
00:09:40.735 --> 00:09:47.458
Branch labels are commonly deleted after a topic branch has been merged.

169
00:09:47.458 --> 00:09:50.290
Let's take a look at what could

170
00:09:50.290 --> 00:09:54.495
happen if you tried deleting a branch label with unmerged work.

171
00:09:54.495 --> 00:09:57.340
Let's say that you created a feature X branch off

172
00:09:57.340 --> 00:10:00.820
of commits C of the master branch as shown.

173
00:10:00.820 --> 00:10:05.915
Then you did some work on feature X and made commit D.. At that point,

174
00:10:05.915 --> 00:10:08.660
if you tried to delete the feature X branch label,

175
00:10:08.660 --> 00:10:13.305
there would be a problem because commit D does not belong to any other branch.

176
00:10:13.305 --> 00:10:16.100
Git normally will not let you do that.

177
00:10:16.100 --> 00:10:19.680
Here we tried to delete the feature X branch label.

178
00:10:19.680 --> 00:10:24.100
You can see that it responds by saying that the branch is not fully merged.

179
00:10:24.100 --> 00:10:28.620
This means that you could lose some commits that would not belong to any branch.

180
00:10:28.620 --> 00:10:32.360
Git tells you what you can do to really delete the branch label,

181
00:10:32.360 --> 00:10:38.115
which is to specify the D option with git branch.

182
00:10:38.115 --> 00:10:40.830
Let's say that we don't care about commit D and

183
00:10:40.830 --> 00:10:44.965
delete the feature X branch label using the D option.

184
00:10:44.965 --> 00:10:47.738
The feature X label will be deleted,

185
00:10:47.738 --> 00:10:53.365
and you're left with a dangling Committee D. Commit D doesn't belong to any branch.

186
00:10:53.365 --> 00:10:55.500
Git will periodically garbage collect,

187
00:10:55.500 --> 00:10:58.980
looking for and deleting older dangling commits.

188
00:10:58.980 --> 00:11:01.975
So be careful if you use the D option.

189
00:11:01.975 --> 00:11:07.386
It assumes that you want to throw away the work that's in the dangling commits.

190
00:11:07.386 --> 00:11:11.620
Let's say that you accidentally deleted a branch label,

191
00:11:11.620 --> 00:11:13.941
and you left some dangling commits.

192
00:11:13.941 --> 00:11:17.975
You can use a command called git reflog to undo that.

193
00:11:17.975 --> 00:11:24.190
Git reflog is a command that returns a local list of recent HEAD commits.

194
00:11:24.190 --> 00:11:26.845
This list is in the local .git directory,

195
00:11:26.845 --> 00:11:28.240
but not in the repository.

196
00:11:28.240 --> 00:11:30.670
So this only works locally.

197
00:11:30.670 --> 00:11:36.751
In this case, a dangling commit D can be found in the list of recent HEAD commits.

198
00:11:36.751 --> 00:11:39.453
Let's look at an example.

199
00:11:39.453 --> 00:11:43.665
Here let's say that we use the D option of git branch,

200
00:11:43.665 --> 00:11:46.635
and deleted the feature X branch label.

201
00:11:46.635 --> 00:11:48.780
This left a dangling commit.

202
00:11:48.780 --> 00:11:55.525
You can actually see the SHA-1 of the dangling commit in the message returned by git.

203
00:11:55.525 --> 00:11:59.330
Now we will use to git reflog to find that SHA-1.

204
00:11:59.330 --> 00:12:02.568
We execute to git reflog command,

205
00:12:02.568 --> 00:12:07.440
and what is returned is a list of the recent commits that HEAD pointed to.

206
00:12:07.440 --> 00:12:09.760
You can see that the second commit in this list,

207
00:12:09.760 --> 00:12:12.745
is the commit that added feature X.

208
00:12:12.745 --> 00:12:15.060
You can also see that the SHA-1 of

209
00:12:15.060 --> 00:12:19.200
this commit matches the SHA-1 that was displayed by get earlier.

210
00:12:19.200 --> 00:12:23.661
Since that commit object has not been deleted from the object store,

211
00:12:23.661 --> 00:12:25.465
we can copy that SHA-1,

212
00:12:25.465 --> 00:12:28.825
and call get checkout with the -b option,

213
00:12:28.825 --> 00:12:31.328
creating a feature X branch.

214
00:12:31.328 --> 00:12:33.495
That creates a new branch label,

215
00:12:33.495 --> 00:12:36.150
pointing to our previously dangling commit,

216
00:12:36.150 --> 00:12:38.020
and we are back in business.

217
00:12:38.020 --> 00:12:44.769
Here is a review of what we've discussed in this video.

218
00:12:44.769 --> 00:12:49.845
A branch is a set of commits that trace back to the project's first commit.

219
00:12:49.845 --> 00:12:53.775
Creating a branch creates a branch label.

220
00:12:53.775 --> 00:12:59.710
Checkout involves updating the HEAD reference and updating the working tree.

221
00:12:59.710 --> 00:13:04.595
A detached HEAD reference points directly to a commit.

222
00:13:04.595 --> 00:13:09.065
Fix a detached HEAD by creating a branch.

223
00:13:09.065 --> 00:13:13.366
Deleting a branch deletes a branch label.

224
00:13:13.366 --> 00:13:20.292
Dangling commits will eventually be garbage collected.

225
00:13:20.292 --> 00:13:24.195
Now it's time for you to try the things discussed in this video.

226
00:13:24.195 --> 00:13:27.370
Separate hands on instructions are provided.