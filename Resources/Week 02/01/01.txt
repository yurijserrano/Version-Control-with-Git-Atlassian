In this video, we will discuss Git's Graph model. A graph model defines the relationship among the commits in a repository. We will start by introducing a Directed Acyclic Graph. A graph is a way to model connected things. The actual connected things can be anything. For example, you can use a graph to model your family history or the directories and files on your computer. Later, we will see that a special type of graph is used by Git to model the commit history of a project. Graphs contain nodes connected by lines. The lines are technically called edges. Here's a graph containing three nodes and two edges. The nodes represent the things that are being modeled, and the lines represent the connections between them. A directed graph means that the nodes are connected in a certain direction. The direction is represented using arrows. Here, we see a directed graph with three nodes and two edges. The nodes are connected with a direction pointing to the right. The arrow direction in a directed graph depends on how you define the relationship between the nodes. For example, let's say that these three nodes represent your grandparent, your parent, and you. Now if I said, "Point to your child," the arrow direction is to the right. However, if I said, "Point to your parent," the arrow direction is to the left. So the arrow direction in a directed graph depends on how you define the relationship between the nodes. Acyclic means no cycles or non-circular. This means that you cannot find a path where you start and finish on the same node. The graph on the left is acyclic because you start on node C, move to node B, then move to node A. There is no way to go back to node C, once you start. The graph on the right is cyclic because you can start an end on node A, simply by going around the circle clockwise. A directed acyclic graph combines the concepts that we just talked about. It contains nodes connected with arrows and has no circular paths. The graph shown here is an example of a directed acyclic graph. It has nodes connected with arrows and you cannot find a path where you start and finish on the same node. Next, we will talk about Git's graph. Git models the relationship of commits with the directed acyclic graph. The entire graph contains a project's history. Each node in Git represents a commit. The arrows point at a commit's parents. In this example, you can see that commit D has two parents, commit B and commit C. The commits and the relationship between them is what forms the project's history. A branch occurs if a commit has more than one child. This graph contains a branch because commit A has two children, commit B and commit C. A merge occurs when a commit has more than one parent. In this example, commit D is a merge of branch one and branch two. When you use Git clients, you will often see the commit graph. Here, we see the commit graph in source tree. This commit history contains a branch and a merge. The most recent commit is at the top. Notice that the graph does not have arrows. The arrows are implied by the vertical order of the commits. Using a command line, the Git log command with the graph option shows you a similar diagram. You might find that graphical clients like source tree are helpful if you want to view complex Git graphs, but the command line also works. To review what we've learned, Git uses a directed acyclic graph to represent commit history. Commits point to their parent commits.