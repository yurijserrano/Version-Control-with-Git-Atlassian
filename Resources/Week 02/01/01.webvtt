WEBVTT

1
00:00:01.470 --> 00:00:05.620
In this video, we will discuss Git's Graph model.

2
00:00:05.620 --> 00:00:12.650
A graph model defines the relationship among the commits in a repository.

3
00:00:12.650 --> 00:00:17.525
We will start by introducing a Directed Acyclic Graph.

4
00:00:17.525 --> 00:00:21.875
A graph is a way to model connected things.

5
00:00:21.875 --> 00:00:25.440
The actual connected things can be anything.

6
00:00:25.440 --> 00:00:27.650
For example, you can use a graph to model

7
00:00:27.650 --> 00:00:31.870
your family history or the directories and files on your computer.

8
00:00:31.870 --> 00:00:34.430
Later, we will see that a special type of graph is

9
00:00:34.430 --> 00:00:38.260
used by Git to model the commit history of a project.

10
00:00:38.260 --> 00:00:42.545
Graphs contain nodes connected by lines.

11
00:00:42.545 --> 00:00:45.450
The lines are technically called edges.

12
00:00:45.450 --> 00:00:49.340
Here's a graph containing three nodes and two edges.

13
00:00:49.340 --> 00:00:52.050
The nodes represent the things that are being modeled,

14
00:00:52.050 --> 00:00:55.705
and the lines represent the connections between them.

15
00:00:55.705 --> 00:01:01.275
A directed graph means that the nodes are connected in a certain direction.

16
00:01:01.275 --> 00:01:04.765
The direction is represented using arrows.

17
00:01:04.765 --> 00:01:09.000
Here, we see a directed graph with three nodes and two edges.

18
00:01:09.000 --> 00:01:13.790
The nodes are connected with a direction pointing to the right.

19
00:01:13.790 --> 00:01:18.490
The arrow direction in a directed graph depends on how

20
00:01:18.490 --> 00:01:22.005
you define the relationship between the nodes.

21
00:01:22.005 --> 00:01:25.870
For example, let's say that these three nodes represent your grandparent,

22
00:01:25.870 --> 00:01:28.870
your parent, and you.

23
00:01:28.870 --> 00:01:34.720
Now if I said, "Point to your child," the arrow direction is to the right.

24
00:01:34.720 --> 00:01:36.080
However, if I said,

25
00:01:36.080 --> 00:01:40.010
"Point to your parent," the arrow direction is to the left.

26
00:01:40.010 --> 00:01:42.500
So the arrow direction in a directed graph

27
00:01:42.500 --> 00:01:46.545
depends on how you define the relationship between the nodes.

28
00:01:46.545 --> 00:01:51.245
Acyclic means no cycles or non-circular.

29
00:01:51.245 --> 00:01:55.650
This means that you cannot find a path where you start and finish on the same node.

30
00:01:55.650 --> 00:01:59.850
The graph on the left is acyclic because you start on node C,

31
00:01:59.850 --> 00:02:03.340
move to node B, then move to node A.

32
00:02:03.340 --> 00:02:06.715
There is no way to go back to node C, once you start.

33
00:02:06.715 --> 00:02:11.825
The graph on the right is cyclic because you can start an end on node A,

34
00:02:11.825 --> 00:02:15.770
simply by going around the circle clockwise.

35
00:02:15.770 --> 00:02:21.880
A directed acyclic graph combines the concepts that we just talked about.

36
00:02:21.880 --> 00:02:26.925
It contains nodes connected with arrows and has no circular paths.

37
00:02:26.925 --> 00:02:31.345
The graph shown here is an example of a directed acyclic graph.

38
00:02:31.345 --> 00:02:34.925
It has nodes connected with arrows and you cannot find a path

39
00:02:34.925 --> 00:02:39.715
where you start and finish on the same node.

40
00:02:39.715 --> 00:02:43.446
Next, we will talk about Git's graph.

41
00:02:43.446 --> 00:02:48.600
Git models the relationship of commits with the directed acyclic graph.

42
00:02:48.600 --> 00:02:51.890
The entire graph contains a project's history.

43
00:02:51.890 --> 00:02:54.790
Each node in Git represents a commit.

44
00:02:54.790 --> 00:02:58.950
The arrows point at a commit's parents.

45
00:02:58.950 --> 00:03:02.900
In this example, you can see that commit D has two parents,

46
00:03:02.900 --> 00:03:05.335
commit B and commit C.

47
00:03:05.335 --> 00:03:11.455
The commits and the relationship between them is what forms the project's history.

48
00:03:11.455 --> 00:03:16.055
A branch occurs if a commit has more than one child.

49
00:03:16.055 --> 00:03:20.210
This graph contains a branch because commit A has two children,

50
00:03:20.210 --> 00:03:27.970
commit B and commit C. A merge occurs when a commit has more than one parent.

51
00:03:27.970 --> 00:03:33.835
In this example, commit D is a merge of branch one and branch two.

52
00:03:33.835 --> 00:03:35.335
When you use Git clients,

53
00:03:35.335 --> 00:03:38.265
you will often see the commit graph.

54
00:03:38.265 --> 00:03:40.680
Here, we see the commit graph in source tree.

55
00:03:40.680 --> 00:03:43.500
This commit history contains a branch and a merge.

56
00:03:43.500 --> 00:03:46.225
The most recent commit is at the top.

57
00:03:46.225 --> 00:03:48.780
Notice that the graph does not have arrows.

58
00:03:48.780 --> 00:03:53.140
The arrows are implied by the vertical order of the commits.

59
00:03:53.140 --> 00:03:55.590
Using a command line,

60
00:03:55.590 --> 00:04:00.695
the Git log command with the graph option shows you a similar diagram.

61
00:04:00.695 --> 00:04:03.515
You might find that graphical clients like source tree

62
00:04:03.515 --> 00:04:06.547
are helpful if you want to view complex Git graphs,

63
00:04:06.547 --> 00:04:10.410
but the command line also works.

64
00:04:10.680 --> 00:04:14.195
To review what we've learned,

65
00:04:14.195 --> 00:04:18.695
Git uses a directed acyclic graph to represent commit history.

66
00:04:18.695 --> 00:04:22.050
Commits point to their parent commits.