In this video, we will discuss Git IDs. We will start by briefly discussing Git objects. Internally, Git uses objects to store four types of things. A commit object is a simple text file that contains information such as the commit user information, commit message, a reference to the commit's parent or parents, and a reference to the root tree of the project. That information is all that Git needs to rebuild the full contents of a commit. An annotated tag is a reference to a specific commit. A tree is an object that contains a list of the filenames and directories inside of a directory. A blob is an object that stores the content of a file that is being managed by Git. A typical Git user may only interact with commit objects and tags, letting Git worry about the details related to trees and blobs. Git keeps these objects internally in something called the object store, but you typically don't directly interact with the object store. Next, we will discuss Git IDs. A Git ID is the name of a Git object. All of the objects stored by Git are named with a 40-character hexadecimal string. These strings are commonly known as Git IDs, but they are also known as object IDs, SHA-1s, hashes and checksums. You commonly see these Git IDs as you work with Git. For example, the Git log command will show 40-character commit IDs like what we see here. That string is the name of a commit object. Git IDs are what's known as secure hash algorithm one or SHA-1 values. The 40-character hexadecimal string is the result of a mathematical computation based on the content. Statistically speaking, the SHA-1 value is unique for a given piece of content. The exact same content will always result in the same SHA-1 value, but it is virtually impossible to find two different content files that produce the same SHA-1 value. SHA-1 values are designed to avalanche. Which means that small changes in the content, leads to a large difference in the SHA-1 values. To see this, the SHA-1 of the simple string, hi, starts with 45b9. The SHA-1 of the same string with a trailing space starts with ob5d. You can see that even very similar content leads to drastically different SHA-1 values. The Git hash-object command can be used to create SHA-1 values from file contents. You probably won't use this command very often, but Git uses it behind the scenes to create Git IDs. First, we create a file named fileA.text containing the string, hi. We then execute the Git hash-object command, passing in fileA.text. You can see that Git returns the SHA-1 of the file contents. We can execute the same command on the same file and Git will return the same SHA-1 value. The string, hi, will always return this SHA-1. Now, we can change fileA.text contents to hi with a trailing space. Executing Git hash-object again, will create a drastically different SHA-1. This is the avalanching behavior that we just talked about. Small changes in content lead to large changes in SHA-1 values. Git hash-object is an example of a low level or plumbing command in Git. You probably will not commonly use plumbing commands, but they're useful for scripting and can be useful for helping you to understand Git. Finally, we will discuss shortening Git IDs. Since the 40-character Git ID names are not very people friendly, Git sometimes shortens them to the first seven characters. Here you can see that the Git log command with the one line option returns a shortened Git ID for the commit object. If we execute the Git log command with no options, you can see that the full 40-character version of the commit object name is used. Notice that the first seven characters match the shortened version of the Git ID. When you are entering IDs in Git commands, you can shorten the IDs too, just to use at least the first four characters when referencing an ID. If there is only one object in the object store that starts with those characters, Git will know which object you are referring to. In rare cases, two objects may start with similar characters and you may need to enter more characters of the ID in order for Git to unambiguously identify the object. In this example, we use the Git show command, which shows the contents of an object. Here, we include only the first four characters of the Git ID. Git knows which object you are referring to and returns information on the object. Here is a review of what we've discussed in this video. Git object names are also known as Git IDs. Git objects are named with SHA-1 values. Statistically speaking, SHA-1 values are unique for a given piece of content. Git IDs are often shortened to the first four or more characters.