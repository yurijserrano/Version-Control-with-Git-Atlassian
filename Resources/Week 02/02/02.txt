In this video, we will discuss Git IDs. We will start by briefly discussing Git objects. Internally, Git uses objects to store four types of things. A commit object is a simple text file that contains information such as the commit user information, commit message, a reference to the commits parent or parents and a reference to the root tree of the project. That information is all that Git needs to rebuild the full contents of a commit. An annotated tag is a reference to a specific commit. A tree is an object that contains a list of the file names and directories inside of a directory. A blob is an object that stores the content of a file that is being managed by Git. A typical Git user may only interact with commit objects and tags, letting Git worry about the details related to trees and blobs. Git keeps these objects internally in something called the object store but you typically don't directly interact with the object store. Next, we will discuss Git IDs. A Git ID is the name of a Git object. All of the objects stored by Git are named with a 40-character hexadecimal string. These strings are commonly known as Git IDs, but they are also known as object IDs, SHA-1, hashes and checksums. You commonly see these Git IDs as you work with Git. For example, source tree shows the 40-character commit IDs with the commit details. That string is the name of a Git commit object. Git IDs are what's known as secure hash algorithm 1 or SHA-1 values. This 40-character hexadecimal string is the result of a mathematical computation based on the content. Statistically speaking, the SHA-1 value is unique for a given piece of content. The exact same content will always result in the same SHA-1 value, but it is virtually impossible to find two different content files that produce the same SHA-1 value. SHA-1 values are designed to avalanche, which means that small changes to the content leads to a large difference in the SHA-1 values. To see this, the SHA-1 of the simple string 'Hi' start with 45b9. The SHA-1 of the same string with the trailing space starts with 0b5d. You can see that even very similar content leads to drastically different SHA-1 values. Finally, we will discuss shortening Git IDs. Since the 40-character Git IDs names are not very people friendly, source trees sometimes only shows the first portion of the string. Here you, can see that source tree sometimes displays them with 40 characters but also with seven and 10 characters. Even the first seven characters of the ID uniquely identifies it in almost all cases. Here is a review of what we've discussed in this video. Git object names are also known as Git IDs. Git objects are named with SHA-1 values. Statistically speaking, SHA-1 values are unique for a given piece of content. Git IDs are often shortened to the first four or more characters.