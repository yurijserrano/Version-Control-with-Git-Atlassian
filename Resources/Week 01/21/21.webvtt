WEBVTT

1
00:00:02.145 --> 00:00:06.527
In this video, you will learn to push
commits from a local repository to

2
00:00:06.527 --> 00:00:09.170
a remote repository using a command line.

3
00:00:11.390 --> 00:00:15.140
We will start by discussing the two
fundamental options when starting to work

4
00:00:15.140 --> 00:00:19.060
with a remote repository,
git clone and git remote add.

5
00:00:21.500 --> 00:00:25.660
There are two fundamental ways to start
working with a remote repository,

6
00:00:25.660 --> 00:00:30.890
it depends on if you already have
a local repository, in other words,

7
00:00:30.890 --> 00:00:34.020
if depends on if you already
have some work done via commits

8
00:00:34.020 --> 00:00:37.990
in a local repository that you want
to push to a remote repository.

9
00:00:39.820 --> 00:00:42.670
If you do not have
an existing local repository,

10
00:00:42.670 --> 00:00:45.180
then you will clone the remote repository,

11
00:00:45.180 --> 00:00:50.230
creating a local repository that is
associated with the remote repository.

12
00:00:50.230 --> 00:00:54.388
If you already have a local repository
with commits that you want to push to

13
00:00:54.388 --> 00:00:56.310
a remote repository,

14
00:00:56.310 --> 00:00:59.530
then you will add the remote
repository to your local repository.

15
00:01:00.660 --> 00:01:03.300
We will begin by discussing
the first scenario,

16
00:01:03.300 --> 00:01:07.770
where you do not have a local repository
and you want to clone a remote repository.

17
00:01:09.537 --> 00:01:12.650
We will start by cloning
a remote repository.

18
00:01:14.080 --> 00:01:19.670
Git clone is a command used to create
a local copy of a remote repository.

19
00:01:19.670 --> 00:01:22.960
The word clone can be used as a noun and
a verb.

20
00:01:22.960 --> 00:01:27.250
As a noun, a clone is a local
copy of a remote repository.

21
00:01:27.250 --> 00:01:31.290
As a verb, cloning is
the process of creating a clone.

22
00:01:31.290 --> 00:01:36.080
Once you have cloned a repository, you can
work with the local repository optionally

23
00:01:36.080 --> 00:01:41.240
pushing your commits to and pulling new
commits from the remote repository.

24
00:01:41.240 --> 00:01:45.820
A reference to the remote repository
is included in the local repository.

25
00:01:45.820 --> 00:01:48.320
This allows you to
synchronize the repositories.

26
00:01:51.130 --> 00:01:55.850
The project page of a git hosting provider
provides the git clone command and or

27
00:01:55.850 --> 00:01:59.430
the remote repository URL for you to copy.

28
00:01:59.430 --> 00:02:02.640
Here we see the git clone
command on bit bucket and

29
00:02:02.640 --> 00:02:05.030
the remote repository URL are in GitHub.

30
00:02:08.020 --> 00:02:12.070
The git clone command is used
to clone a remote repository.

31
00:02:12.070 --> 00:02:15.500
You can copy the command or
the URL from a git hosting provider.

32
00:02:16.750 --> 00:02:19.090
If you specify a local project name,

33
00:02:19.090 --> 00:02:21.560
that will be used as the name
of the project directory.

34
00:02:22.830 --> 00:02:27.480
If you do not specify a local project
name, then the project name in the URL

35
00:02:27.480 --> 00:02:32.310
minus the .git will be used as
the name of the project directory.

36
00:02:32.310 --> 00:02:34.820
Let's clone a remote
repository as an example.

37
00:02:36.160 --> 00:02:38.570
We start in the repos directory,

38
00:02:38.570 --> 00:02:43.120
cloning will create a project directory
inside of the repos directory.

39
00:02:43.120 --> 00:02:48.115
In this example, we'll clone a repository
hosted on Bitbucket named helloworld.

40
00:02:49.240 --> 00:02:52.130
Since we didn't specify
a local project name

41
00:02:52.130 --> 00:02:56.470
this will create a hello world project
directory inside of the repos directory.

42
00:02:58.660 --> 00:03:02.690
Executing the command shows that
a repository has been cloned in the hello

43
00:03:02.690 --> 00:03:03.990
world directory,

44
00:03:03.990 --> 00:03:08.600
the commits on the remote repository
are now in your local repository.

45
00:03:08.600 --> 00:03:12.300
We can change to the hello world
directory to view the local repository.

46
00:03:13.970 --> 00:03:17.522
Listing the contents of the directory
shows the .git directory,

47
00:03:17.522 --> 00:03:20.069
just as we would expect for
a local repository.

48
00:03:20.069 --> 00:03:23.860
You can also see some of the project
files in the working tree.

49
00:03:27.090 --> 00:03:31.270
After performing a git clone,
information on the remote repository

50
00:03:31.270 --> 00:03:34.300
is always available using
the git remote command.

51
00:03:35.310 --> 00:03:39.360
The git remote command displays
information about remote repositories

52
00:03:39.360 --> 00:03:41.290
associated with the local repository.

53
00:03:43.260 --> 00:03:45.520
Here we have cloned
the helloworld repository.

54
00:03:47.210 --> 00:03:49.770
We can change to the helloworld
project directory.

55
00:03:51.410 --> 00:03:56.000
Then we execute git remote specifying
the verbose flag to get more detailed

56
00:03:56.000 --> 00:03:56.570
information.

57
00:03:58.890 --> 00:04:02.320
Git responds with information
on the remote repository.

58
00:04:02.320 --> 00:04:05.740
The URL that was used to clone
the remote repository is shown.

59
00:04:07.330 --> 00:04:10.340
Instead of including
that URL in git commands,

60
00:04:10.340 --> 00:04:12.410
you can use the alias named origin.

61
00:04:15.650 --> 00:04:19.480
Next we will add a remote repository
to an existing local repository.

62
00:04:21.620 --> 00:04:24.550
We have seen that there are two
fundamental starting scenarios when

63
00:04:24.550 --> 00:04:26.390
you want to work with a remote repository.

64
00:04:27.560 --> 00:04:30.600
We have already covered the scenario
where you do not start with the local

65
00:04:30.600 --> 00:04:31.560
repository.

66
00:04:31.560 --> 00:04:34.150
In that case,
we cloned the remote repository.

67
00:04:35.490 --> 00:04:39.800
Now we will cover the scenario where you
have commits in a local repository and

68
00:04:39.800 --> 00:04:43.370
you want to add an association
to a remote repository so

69
00:04:43.370 --> 00:04:44.610
that you can synchronize them.

70
00:04:47.180 --> 00:04:50.990
If you already have a local repository
with commits that you want to push to

71
00:04:50.990 --> 00:04:55.840
a remote repository,
you can use the git remote add command.

72
00:04:55.840 --> 00:05:00.410
This command add's information about the
remote repository to the local repository.

73
00:05:01.910 --> 00:05:06.900
The two repositories can then be
synchronized using aliases instead of

74
00:05:06.900 --> 00:05:07.572
URL's.

75
00:05:07.572 --> 00:05:12.009
As an example, let's say that we have
an existing local repository named repoa,

76
00:05:12.009 --> 00:05:16.640
containing commits that we would
like to push to a remote repository.

77
00:05:16.640 --> 00:05:21.150
We can log into Bitbucket and
create a remote repository named repoa.

78
00:05:23.090 --> 00:05:28.820
Then from our existing local repository,
we execute the git remote add command.

79
00:05:28.820 --> 00:05:32.840
In this example,
we name our remote repository origin and

80
00:05:32.840 --> 00:05:35.410
we specify the URL copied from Bitbucket.

81
00:05:37.320 --> 00:05:40.300
Now, when we execute git
remote with the verbose flag,

82
00:05:40.300 --> 00:05:45.640
we can see that the Bitbucket URL is
associated with an alias named origin.

83
00:05:49.705 --> 00:05:54.360
Finally, we will push commits from a local
repository to a remote repository.

84
00:05:56.841 --> 00:06:00.978
Before we talk about pushing commits
to a repository, let's take a moment to

85
00:06:00.978 --> 00:06:05.370
remember what branches are because
they are related to pushing commits.

86
00:06:05.370 --> 00:06:09.890
As a reminder, all commits belong to
a branch, a branch can be thought of as

87
00:06:09.890 --> 00:06:13.350
an independent line of
development of the project.

88
00:06:13.350 --> 00:06:17.440
By default, there is a single branch and
it is called master.

89
00:06:17.440 --> 00:06:22.380
In this example commits A, B, and
C all belong to the master branch.

90
00:06:22.380 --> 00:06:25.610
So far in this course we have
not created any branches.

91
00:06:25.610 --> 00:06:28.105
So all of our commits have been
on a default master branch.

92
00:06:28.105 --> 00:06:32.020
We will cover branches in much
more detail later in the course.

93
00:06:34.490 --> 00:06:36.057
Git push writes commits for

94
00:06:36.057 --> 00:06:40.380
a branch from the local repository
to the remote repository.

95
00:06:40.380 --> 00:06:43.650
A successful push synchronizes
the branches on the local and

96
00:06:43.650 --> 00:06:48.030
remote repositories so that they
contain exactly the same commits.

97
00:06:48.030 --> 00:06:51.900
Pushing to the remote repository is
primarily done to share your work with

98
00:06:51.900 --> 00:06:55.950
the team, but it also serves as a good
back up of the local repository.

99
00:06:58.700 --> 00:07:02.820
You execute the git push command to
push commits from the local repository

100
00:07:02.820 --> 00:07:04.748
to the remote repository.

101
00:07:04.748 --> 00:07:10.330
The first time you push, you should pass
the repository shortcut name or Url.

102
00:07:10.330 --> 00:07:12.360
The shortcut name is often origin.

103
00:07:13.640 --> 00:07:17.190
You should also include the branch
name that you would like to push.

104
00:07:17.190 --> 00:07:22.100
The set upstream, or -u option, is used
to set up a tracking relationship between

105
00:07:22.100 --> 00:07:25.445
your local branch and
the corresponding remote branch.

106
00:07:25.445 --> 00:07:28.020
Git can then inform you when
the branches are out of synch.

107
00:07:29.540 --> 00:07:33.650
The values after git push are all
optional, because git will assume default

108
00:07:33.650 --> 00:07:37.900
information or use previous values
after you've executed the first push.

109
00:07:39.250 --> 00:07:40.360
Let's look at an example.

110
00:07:41.850 --> 00:07:46.150
First we use the git remote command to
verify that our local repository named

111
00:07:46.150 --> 00:07:50.070
repoa has an association
with the remote repository.

112
00:07:50.070 --> 00:07:54.490
Here you can see that the shortcut name
of the remote repository is origin and

113
00:07:54.490 --> 00:07:57.980
it corresponds to the URL of
a repository on Bitbucket.

114
00:07:59.833 --> 00:08:03.140
Next, we execute the git push command.

115
00:08:03.140 --> 00:08:06.030
We specify the -u flag the first time

116
00:08:06.030 --> 00:08:10.340
to set up a tracking relationship
between the local and remote branches.

117
00:08:10.340 --> 00:08:13.720
We are pushing to the remote
repository named origin, and

118
00:08:13.720 --> 00:08:15.920
the branch that we
are pushing is called master.

119
00:08:17.170 --> 00:08:18.400
The first time you push,

120
00:08:18.400 --> 00:08:21.650
you may need to specify your
Bitbucket user name and password.

121
00:08:23.710 --> 00:08:27.172
The commits from the local master
branch are then written to the remote

122
00:08:27.172 --> 00:08:28.780
master branch.

123
00:08:28.780 --> 00:08:32.090
Because there is only one
branch on both repositories,

124
00:08:32.090 --> 00:08:33.900
the repositories are now synchronized.

125
00:08:35.480 --> 00:08:39.590
Notice that after writing the objects to
the remote repository, git informs you

126
00:08:39.590 --> 00:08:42.990
that a tracking relationship has
been set up between the local and

127
00:08:42.990 --> 00:08:46.110
remote branches because
you specified the -u flag.

128
00:08:48.210 --> 00:08:50.910
If you create a remote
repository in Bitbucket,

129
00:08:50.910 --> 00:08:54.600
you will be given some advice on how
to get started with the repository.

130
00:08:54.600 --> 00:08:58.580
The two options depend on if you
have an existing local repository

131
00:08:58.580 --> 00:08:59.740
as we have discussed earlier.

132
00:09:01.020 --> 00:09:05.560
If you do not have a local repository you
can click on, I'm starting from scratch.

133
00:09:06.880 --> 00:09:09.920
The suggestions that are made
should now look pretty familiar,

134
00:09:09.920 --> 00:09:11.090
let's take a closer look.

135
00:09:12.210 --> 00:09:16.900
First execute the git clone command
with the URL provided by Bitbucket.

136
00:09:16.900 --> 00:09:20.390
It is recommended that you execute
this command in your repos directory,

137
00:09:20.390 --> 00:09:22.740
to keep all of your local
repositories organized.

138
00:09:24.440 --> 00:09:28.820
The git clone command will create
a project directory named repoa

139
00:09:28.820 --> 00:09:31.280
corresponding to the remote
repository name.

140
00:09:31.280 --> 00:09:32.850
Here you change to that directory.

141
00:09:34.790 --> 00:09:40.200
Next a simple read me file is added to
the working tree in the local repository.

142
00:09:40.200 --> 00:09:43.340
If this file exists in
the commit Bitbucket will show

143
00:09:43.340 --> 00:09:45.940
this file on the homepage for
the remote repository.

144
00:09:47.930 --> 00:09:50.648
Then you add the README
file to the staging area so

145
00:09:50.648 --> 00:09:52.580
that it will be in the next commit.

146
00:09:54.490 --> 00:10:00.130
Execute git commit and specify
the commit message as Initial commit.

147
00:10:00.130 --> 00:10:02.300
You now have a commit in
the local repository.

148
00:10:03.960 --> 00:10:08.353
Execute git push to write the commits of
the local master branch to the remote

149
00:10:08.353 --> 00:10:10.102
master branch.

150
00:10:10.102 --> 00:10:14.520
The -u flag is used to set up a tracking
relationship between the local and

151
00:10:14.520 --> 00:10:16.505
remote master branches.

152
00:10:16.505 --> 00:10:18.330
Notice that the origin name for

153
00:10:18.330 --> 00:10:22.110
the remote URL was created
when you executed git clone.

154
00:10:24.527 --> 00:10:29.435
The other option that Bitbucket suggests
after you create a remote repository is

155
00:10:29.435 --> 00:10:32.466
relevant if you already
have a local repository,

156
00:10:32.466 --> 00:10:35.730
in this case you select,
I have an existing project.

157
00:10:37.180 --> 00:10:40.530
The suggestions here should
also look familiar to you.

158
00:10:40.530 --> 00:10:44.510
Step one has you navigate to the project
directory of your local repository.

159
00:10:46.260 --> 00:10:49.740
Step two has you connect to your
existing repository to Bitbucket.

160
00:10:50.930 --> 00:10:55.010
You execute the git remote add command
to set up a relationship between

161
00:10:55.010 --> 00:10:59.060
your local repository, and
the remote Bitbucket repository.

162
00:10:59.060 --> 00:11:03.300
This command will add the Bitbucket
repository URL with the shortcut name

163
00:11:03.300 --> 00:11:04.080
of origin.

164
00:11:05.840 --> 00:11:09.510
You then push your local commits on
the master branch to the master branch

165
00:11:09.510 --> 00:11:11.670
of the remote repository.

166
00:11:11.670 --> 00:11:15.840
The -u flag is set to set up a tracking
relationship between the local and

167
00:11:15.840 --> 00:11:17.170
remote master branches.

168
00:11:18.490 --> 00:11:22.420
When you execute this command, the commits
on the local repositories master

169
00:11:22.420 --> 00:11:25.310
branch will be written to
the remote repository.

170
00:11:25.310 --> 00:11:29.060
Assuming there are no other branches,
your repositories are now synchronized.

171
00:11:31.890 --> 00:11:36.690
Once you have successfully pushed a commit
to Bitbucket, you can log into Bitbucket,

172
00:11:36.690 --> 00:11:41.030
click on Commits and verify that
the commit is in the remote repository.

173
00:11:43.895 --> 00:11:47.893
To review what we've discussed, if you
want to begin working with the remote

174
00:11:47.893 --> 00:11:50.055
repository, you have two main options.

175
00:11:51.145 --> 00:11:55.565
If you do not have a local repository,
you clone the remote repository and

176
00:11:55.565 --> 00:11:57.325
a local repository will be created.

177
00:11:59.235 --> 00:12:03.175
If you already have a local repository
with commits that you want to push to

178
00:12:03.175 --> 00:12:04.750
the remote repository,

179
00:12:04.750 --> 00:12:07.760
you can add the remote repository
from the local repository.

180
00:12:09.400 --> 00:12:11.160
Once you've associated the local and

181
00:12:11.160 --> 00:12:15.060
remote repositories, you can push
commits to the remote repository.

182
00:12:16.120 --> 00:12:17.470
That is just a start.

183
00:12:17.470 --> 00:12:21.470
We will discuss synchronizing the
repositories more later in this course.

184
00:12:24.360 --> 00:12:27.730
Now it's time for you to push
commits to a remote repository.

185
00:12:27.730 --> 00:12:31.330
Separate hands on instructions will
guide you through the process.

186
00:12:31.330 --> 00:12:36.630
You will first clone your Bibucket
repository, creating a local repository.

187
00:12:36.630 --> 00:12:39.680
Then you will create a commit
in the local repository and

188
00:12:39.680 --> 00:12:41.610
push the commit to the remote repository.